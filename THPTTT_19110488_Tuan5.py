# -*- coding: utf-8 -*-
"""PTTT - Lab05.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uPW8ezBMKBHh0PI9Y2mazVdthEil1ASQ
"""

import numpy as np
import time
from random import randint
import matplotlib.pyplot as plt
from math import log2

N = [2 ** k for k in range(1, 10)]

A = list()
B = list()
for n in N:
  a = np.random.randint(1, 1000, size = (n, n))
  b = np.random.randint(1, 1000, size = (n, n))
  A.append(a)
  B.append(b)

def matrix_multiplication(x, y):
  n = len(x)
  result = np.zeros((n, n))

  for i in range(n):
    for j in range(n):
      for k in range(n):
        result[i][j] += x[i][k] * y[k][j]

  return result

time_1 = list()
result_1 = list()
for x, y in zip(A, B):
  start_time = time.time()
  result_1.append(matrix_multiplication(x, y))
  time_1.append(time.time() - start_time)

def split(matrix):
  row, col = matrix.shape
  row2, col2 = row//2, col//2
  return matrix[:row2, :col2], matrix[:row2, col2:], matrix[row2:, :col2], matrix[row2:, col2:]

def strassen(x, y):
  if len(x) == 1:
      return x * y

  a, b, c, d = split(x)
  e, f, g, h = split(y)

  p1 = strassen(a + d, e + h)
  p2 = strassen(c + d, e)
  p3 = strassen(a, f - h)
  p4 = strassen(d, g - e)
  p5 = strassen(a + b, h)
  p6 = strassen(c - a, e + f)
  p7 = strassen(b - d, g + h)

  c11 = p1 + p4 - p5 + p7
  c12 = p3 + p5
  c21 = p2 + p4
  c22 = p1 + p3 - p2 + p6

  c = np.vstack((np.hstack((c11, c12)), np.hstack((c21, c22))))

  return c

time_2 = list()
result_2 = list()
for x, y in zip(A, B):
  start_time = time.time()
  result_2.append(strassen(x, y))
  time_2.append(time.time() - start_time)

plt.figure(figsize=(8, 8))

plt.subplot(221)
plt.plot(N, [n ** 3 for n in N], label = "N ^ 3")
plt.legend()

plt.subplot(222)
plt.plot(N, [n ** log2(7) for n in N], label = "N ^ log2(7)")
plt.legend()

plt.subplot(223)
plt.plot(N, time_1, label = "Matrix Multiplication")
plt.legend()

plt.subplot(224)
plt.plot(N, time_2, label = "Strassen")
plt.legend()

plt.show()

plt.figure(figsize=(8, 8))

plt.subplot(211)
plt.plot(N, [n ** 3 for n in N], label = "N ^ 3")
plt.legend()
plt.plot(N, [n ** log2(7) for n in N], label = "N ^ log2(7)")
plt.legend()

plt.subplot(212)
plt.plot(N, time_1, label = "Matrix Multiplication")
plt.legend()
plt.plot(N, time_2, label = "Strassen")
plt.legend()

plt.show()